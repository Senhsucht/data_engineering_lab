{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "flights_feb",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "flights_mar",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "flights_jan",
						"type": "DatasetReference"
					},
					"name": "source4"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "flights"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "union1"
				},
				{
					"name": "cast1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          DAY_OF_MONTH as string,",
				"          DAY_OF_WEEK as string,",
				"          OP_UNIQUE_CARRIER as string,",
				"          OP_CARRIER_AIRLINE_ID as string,",
				"          OP_CARRIER as string,",
				"          TAIL_NUM as string,",
				"          OP_CARRIER_FL_NUM as string,",
				"          ORIGIN_AIRPORT_ID as string,",
				"          ORIGIN_AIRPORT_SEQ_ID as string,",
				"          ORIGIN as string,",
				"          DEST_AIRPORT_ID as string,",
				"          DEST_AIRPORT_SEQ_ID as string,",
				"          DEST as string,",
				"          DEP_TIME as string,",
				"          DEP_DEL15 as string,",
				"          DEP_TIME_BLK as string,",
				"          ARR_TIME as string,",
				"          ARR_DEL15 as string,",
				"          CANCELLED as string,",
				"          DIVERTED as string,",
				"          DISTANCE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          DAY_OF_MONTH as string,",
				"          DAY_OF_WEEK as string,",
				"          OP_UNIQUE_CARRIER as string,",
				"          OP_CARRIER_AIRLINE_ID as string,",
				"          OP_CARRIER as string,",
				"          TAIL_NUM as string,",
				"          OP_CARRIER_FL_NUM as string,",
				"          ORIGIN_AIRPORT_ID as string,",
				"          ORIGIN_AIRPORT_SEQ_ID as string,",
				"          ORIGIN as string,",
				"          DEST_AIRPORT_ID as string,",
				"          DEST_AIRPORT_SEQ_ID as string,",
				"          DEST as string,",
				"          DEP_TIME as string,",
				"          DEP_DEL15 as string,",
				"          DEP_TIME_BLK as string,",
				"          ARR_TIME as string,",
				"          ARR_DEL15 as string,",
				"          CANCELLED as string,",
				"          DIVERTED as string,",
				"          DISTANCE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source(output(",
				"          DAY_OF_MONTH as string,",
				"          DAY_OF_WEEK as string,",
				"          OP_UNIQUE_CARRIER as string,",
				"          OP_CARRIER_AIRLINE_ID as string,",
				"          OP_CARRIER as string,",
				"          TAIL_NUM as string,",
				"          OP_CARRIER_FL_NUM as string,",
				"          ORIGIN_AIRPORT_ID as string,",
				"          ORIGIN_AIRPORT_SEQ_ID as string,",
				"          ORIGIN as string,",
				"          DEST_AIRPORT_ID as string,",
				"          DEST_AIRPORT_SEQ_ID as string,",
				"          DEST as string,",
				"          DEP_TIME as string,",
				"          DEP_DEL15 as string,",
				"          DEP_TIME_BLK as string,",
				"          ARR_TIME as string,",
				"          ARR_DEL15 as string,",
				"          CANCELLED as string,",
				"          DIVERTED as string,",
				"          DISTANCE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source4",
				"union1 select(mapColumn(",
				"          OP_CARRIER,",
				"          ORIGIN,",
				"          DEST,",
				"          DEP_DEL15,",
				"          ARR_DEL15",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"cast1 aggregate(groupBy(OP_CARRIER,",
				"          ORIGIN,",
				"          DEST),",
				"     total_flights = count(),",
				"          departure_delayed_flights = sum(DEP_DEL15),",
				"          arrival_delayed_flights = sum(ARR_DEL15),",
				"          departure_delay_percentage = sum(DEP_DEL15)/count(),",
				"          arrival_delay_percentage = sum(ARR_DEL15)/count()) ~> aggregate1",
				"select1 filter(!isNull(DEP_DEL15)&&!isNull(ARR_DEL15)) ~> filter1",
				"source2, source3, source4 union(byName: true)~> union1",
				"filter1 cast(output(",
				"          DEP_DEL15 as integer '000',",
				"          ARR_DEL15 as integer '000'",
				"     ),",
				"     errors: true) ~> cast1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     filePattern:'flights.parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          OP_CARRIER,",
				"          ORIGIN,",
				"          DEST",
				"     )) ~> flights"
			]
		}
	}
}